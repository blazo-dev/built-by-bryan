---
import "@fontsource-variable/dm-sans";
import { portfolioData } from "../data/portfolioData";
import "../styles/global.css";
import Navbar from "../components/navbar/Navbar.astro";

const { title, name, description } = portfolioData.personalInfo;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content={description} />
        <title>{`${name} - ${title}`}</title>
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
            rel="stylesheet"
        />
    </head>
    <body class="bg-custom-darkest text-gray-100">
        <Navbar />
        <slot />
    </body>
</html>
<style is:global>
    html {
        scroll-behavior: smooth;
    }

    body {
        font-family: "DM Sans Variable", sans-serif;
    }

    .bg-custom-darkest {
        background-color: #111315;
    }

    .bg-custom-dark {
        background-color: #1b1d1f;
    }

    .card-hover {
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
    }

    .card-hover:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    }

    .timeline-line {
        position: relative;
    }

    .timeline-line::before {
        content: "";
        position: absolute;
        left: 15px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #139bd7;
    }

    .timeline-dot {
        position: relative;
        z-index: 10;
    }

    .skill-icon {
        transition: transform 0.3s ease;
    }

    .skill-icon:hover {
        transform: scale(1.1);
    }

    .nav-link {
        transition: color 0.3s ease;
    }

    .nav-link:hover {
        color: #f3f4f6;
    }

    .section-fade {
        opacity: 0;
        transform: translateY(20px);
        transition:
            opacity 0.6s ease,
            transform 0.6s ease;
    }

    .section-fade.visible {
        opacity: 1;
        transform: translateY(0);
    }
</style>
<script is:inline>
    // Wait for the DOM to fully load before running the script
    document.addEventListener("DOMContentLoaded", () => {
        // Add smooth scrolling to all anchor links that point to IDs (#section)
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
            anchor.addEventListener("click", function (e) {
                e.preventDefault(); // Prevent default jump
                const target = document.querySelector(
                    this.getAttribute("href")
                ); // Get the target section
                if (target) {
                    // Scroll to the section smoothly
                    target.scrollIntoView({
                        behavior: "smooth",
                        block: "start",
                    });
                    // Close the mobile menu if it's open
                    mobileMenu?.classList.add("hidden");
                }
            });
        });

        // Options for the IntersectionObserver (for fade-in animations)
        const observerOptions = {
            threshold: 0.1, // Trigger when 10% of the element is visible
            rootMargin: "0px 0px -50px 0px", // Offset from the viewport
        };

        // Create an IntersectionObserver to detect when sections come into view
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    // When the element is visible, add the 'visible' class
                    entry.target.classList.add("visible");
                }
            });
        }, observerOptions);

        // Observe all sections with the .section-fade class
        document.querySelectorAll(".section-fade").forEach((section) => {
            observer.observe(section);
        });

        // Scroll listener to highlight the current section in the navigation menu
        window.addEventListener("scroll", () => {
            const sections = document.querySelectorAll("section[id]"); // All sections with an ID
            const navLinks = document.querySelectorAll(".nav-link"); // Navigation links
            let current = "";

            // Determine which section is currently in view
            sections.forEach((section) => {
                const sectionTop = section.offsetTop - 100; // Offset to trigger before full section
                const sectionHeight = section.clientHeight;
                if (
                    scrollY >= sectionTop &&
                    scrollY < sectionTop + sectionHeight
                ) {
                    current = section.getAttribute("id"); // Set the current section ID
                }
            });

            // Highlight the corresponding nav link
            navLinks.forEach((link) => {
                link.classList.remove("text-blue-600"); // Remove highlight from all links
                if (link.getAttribute("href") === `#${current}`) {
                    link.classList.add("text-blue-600"); // Highlight the current link
                }
            });
        });
    });
</script>
